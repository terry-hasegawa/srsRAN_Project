#
# Copyright 2021-2025 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

services:
  gnb:
    # a gNB service is already defined in the base docker-compose.yml file.
    # This replaces it with a dummy service that does nothing
    # but builds the srsran/gnb image so that the CU/DU services can reuse it.
    image: srsran/gnb
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        OS_VERSION: "24.04"
    networks: {}
    entrypoint: [ "true" ]

  cu-cp:
    container_name: srsran_cu_cp
    image: srsran/gnb
    networks:
      ran:
        ipv4_address: ${CU_CP_IP:-10.53.1.4}
    volumes:
      - gnb-storage:/tmp,subpath=cu_cp
    depends_on:
      gnb:
        condition: service_completed_successfully
      5gc:
        condition: service_healthy
    configs:
      - cu_cp_config.yml
      - cu_cp_compose_config.yml
    healthcheck:
      test: [ "CMD-SHELL", "for p in 38462 38472; do ss -l -H -A sctp \"sport = :$p\" | grep -q . || exit 1; done; exit 0" ]
      interval: 3s
      timeout: 1s
      retries: 60
    command: srscucp -c /cu_cp_config.yml -c /cu_cp_compose_config.yml

  cu-up:
    container_name: srsran_cu_up
    image: srsran/gnb
    networks:
      ran:
        ipv4_address: ${CU_UP_IP:-10.53.1.5}
      f1u:
        ipv4_address: ${CU_UP_F1U_IP:-172.18.10.2}
    volumes:
      - gnb-storage:/tmp,subpath=cu_up
    depends_on:
      gnb:
        condition: service_completed_successfully
      cu-cp:
        condition: service_healthy
    configs:
      - cu_up_config.yml
      - cu_up_compose_config.yml
    command: srscuup -c /cu_up_config.yml -c /cu_up_compose_config.yml

  du:
    container_name: srsran_du
    image: srsran/gnb
    privileged: true
    cap_add:
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      - gnb-storage:/tmp,subpath=du
      - /dev/bus/usb/:/dev/bus/usb/
      - /usr/share/uhd/images:/usr/share/uhd/images
    networks:
      ran:
        ipv4_address: ${DU_IP:-10.53.1.6}
      f1u:
        ipv4_address: ${DU_F1U_IP:-172.18.10.3}
      metrics:
        ipv4_address: 172.19.1.3
    depends_on:
      gnb:
        condition: service_completed_successfully
      cu-cp:
        condition: service_healthy
    configs:
      - du_config.yml
      - du_compose_config.yml
    command: srsdu -c /du_config.yml -c /du_compose_config.yml

configs:
  cu_cp_config.yml:
    file: ${CUCP_CONFIG_PATH:-../configs/cu_cp.yml}
  cu_cp_compose_config.yml:
    content: |
      cu_cp:
        amf:
          addr: ${OPEN5GS_IP:-10.53.1.2}
          bind_addr: ${CU_CP_IP:-10.53.1.4}
        e1ap:
          bind_addr: ${CU_CP_IP:-10.53.1.4}
        f1ap:
          bind_addr: ${CU_CP_IP:-10.53.1.4}
  cu_up_config.yml:
    file: ${CUUP_CONFIG_PATH:-../configs/cu_up.yml}
  cu_up_compose_config.yml:
    content: |
      cu_up:
        e1ap:
          cu_cp_addr: ${CU_CP_IP:-10.53.1.4}
          bind_addr: ${CU_UP_IP:-10.53.1.5}
        f1u:
          socket:
            -
              bind_addr: ${CU_UP_F1U_IP:-172.18.10.2}
  du_config.yml:
    file: ${DU_CONFIG_PATH:-../configs/du_rf_b200_tdd_n78_20mhz.yml}
  du_compose_config.yml:
    content: |
      f1ap:
        cu_cp_addr: ${CU_CP_IP:-10.53.1.4}
        bind_addr: ${DU_IP:-10.53.1.6}
      f1u:
        socket:
          -
            bind_addr: ${DU_F1U_IP:-172.18.10.3}
      metrics:
        autostart_stdout_metrics: true
        enable_json: true
      remote_control:
        bind_addr: 0.0.0.0
        enabled: true

networks:
  f1u:
    name: f1u_network
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
    ipam:
      driver: default
      config:
        - subnet: "172.18.10.0/24"
        - subnet: fd00:0:0:10::/64
          gateway: fd00:0:0:10::1
